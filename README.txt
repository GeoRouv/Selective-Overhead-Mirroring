Εαρινό εξάμηνο 2017
Προγραμματισμός Συστήματος - Εργασία3
Ον/μο: ΓΙΩΡΓΟΣ ΡΟΥΒΑΛΗΣ
Α.Μ: 1115201400173
email: sdi1400173@di.uoa.gr

Εντολή μεταγλώτισσης:
	$make
	($make clean για καθαρισμό των αρχείων)

Περιγραφή αρχέιων παραδοτέου:
	MirrorInitiator.c : To αρχικό πρόγραμμα που εκκινεί τη διαδικασία απόκτησης αρχείων
	MirrorServer.c	  : Ο server που δημιουργείται στο μηχάνημά μας για να επικοινωνήσει με άλλους και να μας φέρει τα ζητούμενα αρχεία.
	MirrorServer.h	  : Η δήλωση όλων των struct που χρησιμοποιήθηκαν.
	ContentServer.c	  :	Οι απομακρυσμένοι servers που εξυπηρετουν τα αιτήματα LIST και FETCH.
	Makefile		  : -

Εντολές εκτέλεσης:(ενδεδειγμένα παραδείγματα):
    ./MirrorInitiator -n 192.168.1.9 -p 1121 -s 192.168.1.9:1050:feels.jpg:2,192.168.1.9:1051:src:1,192.168.1.9:1052:home:3
    ./MirrorServer -p 1121 -w 3 -m ~/Desktop/Results 
    ./ContentServer -p 1050 -d ~/Pictures
    ./ContentServer -p 1051 -d ~/Desktop
    ./ContentServer -p 1052 -d ~/Downloads

	Επίσης, γενικά, όλες οι δοκιμές των contentservers έγιναν στην ipv4 address του ίδιου του υπολογιστή.

MirrorInitiator(MirrorInitiator.c):
	O initiator συνδέεται στο socket του ΜirrorServer και στέλνει αρχικά τη λίστα με τα ζητούμενα αρχεία/καταλόγους και τις πηγές που τα παρέχουν.Μετά μπαίνει σε CLI mode και περιμένει απ'το χρήστη να πληκτρολογήσει.(ΣΗΜΕΙΩΣΗ: με την πληκτρολόγησει της λέξης "exit" τερματίζουν MirrorInitiator-MirrorServer).

MirrorServer(MirrorServer.c):
	O MirrorServer αρχικοποιεί το socket του, συνδέεται με τον Initiator και λαμβάνει τη λίστα.Ύστερα χωρίζει τη λίστα ανά κομμάτια και τα βάζει σε ένα buffer.Αφού μετρήσει τον αριθμό των στοιχείων στο buffer φτιάχνει και τον αντίστοιχο αριθμό Managers(Threads).
Τέλος, αναμένει νέαν μηνύματα από τον Initiator.

Managers(MirrorServer.c): 
	Είναι υπέυθυνοι για την εισαγωγή των πληροφοριών(structs) των αρχείων που ζητάμε στο κοινόχρηστο(global buffer) που έχει οριστεί.
Στέλνουν συγκεκριμένα ένα αίτημα LIST στον κατάλληλο ContentServer και επιστρέφονται όλα τα αρχεία που έχει αυτός ο server.
Για την πρόσβαση στο shared buffer, έχω χρησιμοποιήσει ένα πίνακα από mutexes όπου κάθε ένα αντιστοιχεί και σε ένα στοιχείο του shared buffer και είναι υπεύθυνα για το lock-unlocking.Eπιπλέον έβαλα και άλλο ένα mutex για την πρόσβαση στις μεταβλητές που ορίζουν το μέγεθος της ουράς και τους δείκτες της(front, rear).

Workers(MirrorServer.c):
	Οι workers διαρκώς ελέγχουν αν υπάρχει στοιχείο(struct) πληροφοριών στο shared buffer και αν ναι στέλνουν ένα αίτημα FETCH στον κατάλληλο ContentServer και ύστερα μπαίνουν σε διαδικασία απόκτησης του άρχείου.Το μόνο που δεν υλοποίησα ήταν το handling των στοιχείων που είναι directories και όχι regular files.

ContentServers(ContentServer.c):
	"Ακούνε" διαρκώς για αιτήματα LIST( όπου επιστρεφουν όλες τις ονομασίες των αρχείων που εξυπηρετούν) και FETCH(όπου πρώτα στέλνουν το μέγεθος του αρχείου και ύστερα επαναληπτικά κάνουν write τα bytes του αρχείου στο κατάλληλο socket ώστε να έρθει στον Worker.



Περαιτέρω σχόλια μέσα στον κώδικα και από κοντά.
